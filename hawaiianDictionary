/**
 * AVL Tree Implementation for Storing Hawaiian Sayings
 * This class implements an AVL tree to store Hawaiian sayings
 * along with their English translations and explanations.
 *
 * The tree ensures efficient operations (O(log n)) for insertion and searches, and
 * supports Unicode characters for proper handling of Hawaiian language special characters.
 * 
 * Citation: AVL Tree algorithm adapted from [Introduction to Algorithms, Chapter 13].
 */

/*saying object that holds a Hawaiian saying, its English translation, 
and their respective explanations*/
//created and worked on by Lindsey 
class Saying {
  hawaiian: string;
  english: string;
  hExplanation: string;
  eExplanation: string;

  // constructor for the Saying object
  constructor(
    hawaiian: string,
    english: string,
    hExplanation: string,
    eExplanation: string
  ) {
    this.hawaiian = hawaiian;
    this.english = english;
    this.eExplanation = eExplanation;
    this.hExplanation = hExplanation;
  }


  //converts the Saying object to a string format 
  toString() {
    return "Saying: " +
            "Hawaiian = '" + this.hawaiian + '\'' +
            ", English = '" + this.english + '\'' +
            ", Hawaiian Explanation = '" + this.hExplanation + '\'' +
            ", Englsih Explanation = '" + this.eExplanation + '\'' +
            '}';
  }
}

//class that acts as a wrapper for the AVLTree for storing sayings
//created by Lindsey worked on by Jayden
class HawaiianDictionary {
  tree: AVLTree; 

  //constuctor that initializes the AVL tree for the dictionary 
  constructor() {
    this.tree = new AVLTree();
  }

  //inserts new saying into AVL tree
  insertSaying(saying: Saying) {
    this.tree.insert(saying);
  }

  //returns first saying in the dictionary 
  first(): Saying | null {
    return this.tree.min();
  }

  //returns last saying in the dictionary 
  last(): Saying | null {
    return this.tree.max();
  }
}

// class that represents a balanced node in the AVL Tree 
//created and worked on by Jayden
class AVLNode {
  saying: Saying;
  left: AVLNode | null = null;
  right: AVLNode | null = null;
  height = 0; // initialises height

  //constructor to initialize the AVLNode with a string
  constructor(saying: Saying) {
    this.saying = saying;
  }
}

// AVL Tree to store sayings.
//created and worked on by Jayden
class AVLTree {
  private root: AVLNode | null = null;

  // inserts a new saying into the tree
  insert(saying: Saying): void {
    this.root = this.insertNode(this.root, saying);
  }

  //normalizes a string using Unicode NFC to handle special characters
  private normalize(phrase:string):string{
    return phrase.normalize("NFC");
  }

  // recursive helper function to insert a new saying into the tree
  private insertNode(node: AVLNode | null, saying: Saying): AVLNode {
    if (node === null) {
      return new AVLNode(saying);
    }
    const normalizedHawaiian = this.normalize(saying.hawaiian);
    const normalizedHawaiianNode = this.normalize(node.saying.hawaiian);

    if (normalizedHawaiian < normalizedHawaiianNode) {
      const newNode = this.insertNode(node.left, saying);
      node.left = newNode;
    } else if (normalizedHawaiian > normalizedHawaiianNode) {
      const newNode = this.insertNode(node.right, saying);
      node.right = newNode;
    } else {
      // duplicate sayings are ignored
      return node;
    }

    node.height =
      Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;

    return this.balanceNode(node);
  }

  // BALANCING FUNCTIONS
  
  // calculates the balance factor of a node 
  private getBalance(node: AVLNode): number {
    if (node === null) {
      return 0;
    }
    return this.getHeight(node.left) - this.getHeight(node.right);
  }

  // returns the height of a node
  private getHeight(node: AVLNode | null): number {
    return node ? node.height : 0;
  }

  // performs a left rotation on the node to balance the tree
  private leftRotate(x: AVLNode): AVLNode {
    const y = x.right!;
    const T2 = y.left;

    y.left = x;
    x.right = T2;
    
    x.height = Math.max(this.getHeight(x.left), this.getHeight(x.right)) + 1;
    y.height = Math.max(this.getHeight(y.left), this.getHeight(y.right)) + 1;

    return y;
  }

  // performs a right rotation on the node to balance the tree
  private rightRotate(y: AVLNode): AVLNode {
    const x = y.left!;
    const T2 = x.right;

    x.right = y;
    y.left = T2;

    y.height = Math.max(this.getHeight(y.left), this.getHeight(y.right)) + 1;
    x.height = Math.max(this.getHeight(x.left), this.getHeight(x.right)) + 1;

    return x;
  }

  // balances the subtree rooted at the given node 
  private balanceNode(node: AVLNode): AVLNode {
    const balance = this.getBalance(node);

    // Left heavy rotation.
    if (balance > 1 && node.left && this.getBalance(node.left) >= 0) {
      return this.rightRotate(node);
    }

    // Left-Right rotation.
    if (balance > 1 && node.left && this.getBalance(node.left) < 0) {
      node.left = this.leftRotate(node.left);
      return this.rightRotate(node);
    }

    // Right heavy rotation.
    if (balance < -1 && node.right && this.getBalance(node.right) <= 0) {
      return this.leftRotate(node);
    }

    // Right-Left rotation.
    if (balance < -1 && node.right && this.getBalance(node.right) > 0) {
      node.right = this.rightRotate(node.right);
      return this.leftRotate(node);
    }

    return node;
  }

  // QUERY FUNCTIONS

  // checks for a Hawaiian saying
  member(hawaiian: string): boolean {
    return this.memberNode(this.root, hawaiian);
  }

  protected memberNode(node: AVLNode | null, hawaiian: string): boolean {
    if (node === null) {
      return false;
    }
    if (hawaiian === node.saying.hawaiian) {
      return true;
    }
    return hawaiian < node.saying.hawaiian
      ? this.memberNode(node.left, hawaiian)
      : this.memberNode(node.right, hawaiian);
  }

  // searches for sayings with a specific Hawaiian word
  MeHua(word: string): Saying[] {
    const sayings: Saying[] = [];
    this.MeHuaNode(this.root, word, sayings);
    return sayings;
  }

  private MeHuaNode(
    node: AVLNode | null,
    word: string,
    sayings: Saying[]
  ): void {
    if (node !== null) {
      this.MeHuaNode(node.left, word, sayings);
      if (
        node.saying.hawaiian.includes(word) //||
        //node.saying.english.includes(word)
      ) {
        sayings.push(node.saying);
      }
      this.MeHuaNode(node.right, word, sayings);
    }
  }

  // searches for sayings with a specific English word
  WithWord(word: string): Saying[] {
    const sayings: Saying[] = [];
    this.WithWordNode(this.root, word, sayings);
    return sayings;
  }

  private WithWordNode(
    node: AVLNode | null,
    word: string,
    sayings: Saying[]
  ): void {
    if (node !== null) {
      this.WithWordNode(node.left, word, sayings);
      if (
        //node.saying.hawaiian.includes(word) ||
        node.saying.english.includes(word)
      ) {
        sayings.push(node.saying);
      }
      this.WithWordNode(node.right, word, sayings);
    }
  }

  // finds the first saying in the datbase
  min(): Saying | null {
    return this.minNode(this.root);
  }

  private minNode(node: AVLNode | null): Saying | null {
    if (node === null) return null;
    while (node.left !== null) {
      node = node.left;
    }
    return node.saying;
  }

  // finds the last saying in the database
  max(): Saying | null {
    return this.maxNode(this.root);
  }

  private maxNode(node: AVLNode | null): Saying | null {
    if (node === null) return null;
    while (node.right !== null) {
      node = node.right;
    }
    return node.saying;
  }

  // finds the predecessor of a given Saying
  predecessor(saying: Saying): Saying | null {
    const node = this.findNode(this.root, saying.hawaiian);
    if (!node) return null;

    if (node.left) {
      return this.maxNode(node.left);
    }

    let ancestor = this.root;
    let predecessor: Saying | null = null;

    while (ancestor !== null) {
      if (saying.hawaiian < ancestor.saying.hawaiian) {
        ancestor = ancestor.left;
      } else if (saying.hawaiian > ancestor.saying.hawaiian) {
        predecessor = ancestor.saying;
        ancestor = ancestor.right;
      } else {
        break;
      }
    }
    return predecessor;
  }
  // finds the successor of a given saying
  successor(saying:Saying): Saying | null {
    const node = this.findNode(this.root, saying.hawaiian);
    if (!node) return null;

    if(node.right){
        return this.minNode(node.right);
    }

    let ancestor = this.root;
    let successor:Saying | null = null;

    while(ancestor !== null){
        if(saying.hawaiian < ancestor.saying.hawaiian){
            successor = ancestor.saying;
            ancestor = ancestor.left;
        }
        else if (saying.hawaiian > ancestor.saying.hawaiian){
            ancestor = ancestor.right;
        }
        else{
            break;
        }
    }
    return successor;
  }

  // felper function, finds nodes for predecessor/ancestor functions
  private findNode(node: AVLNode | null, hawaiian: string): AVLNode | null {
    if (node === null) {
      return null;
    }

    if (hawaiian === node.saying.hawaiian) {
      return node;
    } else if (hawaiian < node.saying.hawaiian) {
      return this.findNode(node.left, hawaiian);
    } else {
      return this.findNode(node.right, hawaiian);
    }
  }
}

//testing functionality 
//created and worked on by Lindsey 

const dictionary = new AVLTree();
const saying1 = new Saying("A hui hou kākou", "Until we all meet again", "Hawaiian explanation", "English explanation");
const saying2 = new Saying("Mālama ʻāina", "Take care of the Earth", "Hawaiian explanation", "English explanation");

dictionary.insert(saying1);
dictionary.insert(saying2);

//print all sayings
console.log("All sayings:");
const sayingsWithMalama = dictionary.MeHua("Mālama");
sayingsWithMalama.forEach(phrase => console.log(phrase.toString()));

//first and last sayings
console.log("First saying:", dictionary.min()?.toString());
console.log("Last saying:", dictionary.max()?.toString());

//search by Hawaiian word 'ʻāina' and English word 'earth'
console.log("Sayings with 'ʻāina':", dictionary.MeHua("ʻāina"));
console.log("Sayings with 'Earth':", dictionary.WithWord("Earth"));

// Predecessor and Successor of 'Mālama ʻāina'
console.log("Predecessor of 'Mālama ʻāina':", dictionary.predecessor(new Saying("Mālama ʻāina", "", "", ""))?.toString());
console.log("Successor of 'Mālama ʻāina':", dictionary.successor(new Saying("Mālama ʻāina", "", "", ""))?.toString());
